const express = require('express');
const pool = require('../database.js');
const { isLoggedIn } = require('../lib/auth.js');
const { filterOthers } = require('../lib/helpers.js');

const router = express.Router();

router.get('/', isLoggedIn, async (req, res)=>{
    // información para la tablas
    const cotizaciones = await pool.query('SELECT Cotizaciones.cotId, Cotizaciones.fecha, Cotizaciones.total, Cotizaciones.estatus, Clientes.clienteId, Clientes.nombre FROM (Cotizaciones INNER JOIN Clientes ON Cotizaciones.cliente_id = Clientes.clienteId);');
    const ordenes = await pool.query('SELECT Ordenes.ordenId, Ordenes.fechaGen, Ordenes.terminada, Cotizaciones.total, Clientes.clienteId, Clientes.nombre FROM ((Ordenes INNER JOIN Cotizaciones ON Ordenes.cot_id = Cotizaciones.cotId) INNER JOIN Clientes ON Cotizaciones.cliente_id = Clientes.clienteId);')
    
    // información para las tarjetas
    const tarjEmpleados = await pool.query('SELECT COUNT(Empleados.empleadoId) AS total FROM Empleados INNER JOIN Usuarios ON Empleados.empleadoId = Usuarios.empleado_id WHERE Usuarios.activo = 1;')
    const tarjCotizaciones = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.*, IF(res.total IS NULL, 0, res.total) AS total FROM months LEFT JOIN (SELECT MONTH(fecha) AS month, COUNT(cotId) AS total FROM Cotizaciones WHERE MONTH(fecha) = MONTH(NOW()) AND YEAR(fecha) = YEAR(NOW()) GROUP BY MONTH(fecha)) AS res ON months.num_month = res.month WHERE months.num_month = MONTH(NOW());');
    const tarjOrdenes = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.*, IF(res.total IS NULL, 0, res.total) AS total FROM months LEFT JOIN (SELECT MONTH(fechaGen) AS month, COUNT(ordenId) AS total FROM Ordenes WHERE MONTH(fechaGen) = MONTH(NOW()) AND YEAR(fechaGen) = YEAR(NOW()) GROUP BY MONTH(fechaGen)) AS res ON months.num_month = res.month WHERE months.num_month = MONTH(NOW());');
    const tarjVentas = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.*, IF(res.total IS NULL, 0.00, res.total) AS total FROM months LEFT JOIN (SELECT MONTH(Ordenes.fechaEnt) AS month, SUM(Cotizaciones.total) AS total FROM Ordenes INNER JOIN Cotizaciones ON Ordenes.cot_id = Cotizaciones.cotId WHERE Ordenes.terminada = 0 AND MONTH(Ordenes.fechaEnt) = MONTH(NOW()) AND YEAR(Ordenes.fechaEnt) = YEAR(NOW()) GROUP BY MONTH(Ordenes.fechaEnt)) AS res ON months.num_month = res.month WHERE months.num_month = MONTH(NOW());'); // cambiar 0 a 1
    
    // informacion para la taza de cambio de cada tarjeta
    const cambioEmpleados = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.*, last_month.*, CASE WHEN last_month.total IS NULL OR 0 THEN IFNULL(actual_month.total * 100, 0.00) ELSE IFNULL(ROUND((IFNULL(actual_month.total, 0) - IFNULL(last_month.total, 0))/IFNULL(last_month.total, 0) * 100, 2), 0.00) END AS percentage FROM months LEFT JOIN (SELECT MONTH(Empleados.fechaIngreso) AS month, COUNT(Empleados.empleadoId) AS total FROM ((Empleados INNER JOIN Areas ON Empleados.area_id = Areas.areaId) INNER JOIN Usuarios ON Empleados.empleadoId = Usuarios.empleado_id) WHERE Areas.activo = 1 AND Usuarios.activo = 1 AND MONTH(Empleados.fechaIngreso) = MONTH(NOW()) AND YEAR(Empleados.fechaIngreso) = YEAR(NOW()) GROUP BY MONTH(Empleados.fechaIngreso)) AS actual_month ON months.num_month = actual_month.month LEFT JOIN (SELECT MONTH(Empleados.fechaIngreso) AS month, COUNT(Empleados.empleadoId) AS total FROM ((Empleados INNER JOIN Areas ON Empleados.area_id = Areas.areaId) INNER JOIN Usuarios ON Empleados.empleadoId = Usuarios.empleado_id) WHERE Areas.activo = 1 AND Usuarios.activo = 1 AND MONTH(Empleados.fechaIngreso) = MONTH(NOW() - INTERVAL 1 MONTH) AND CASE WHEN MONTH(NOW()) = "1" THEN YEAR(Empleados.fechaIngreso) = YEAR(NOW() - INTERVAL 1 YEAR) ELSE YEAR(Empleados.fechaIngreso) = YEAR(NOW()) END GROUP BY MONTH(Empleados.fechaIngreso)) AS last_month ON months.num_month = CASE WHEN last_month.month = "12" THEN last_month.month - 11 ELSE last_month.month + 1 END WHERE months.num_month = MONTH(NOW());');
    const cambioCotizaciones = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.*, CASE WHEN last_month.total IS NULL OR 0 THEN IFNULL(actual_month.total * 100, 0.00) ELSE IFNULL(ROUND((IFNULL(actual_month.total, 0) - IFNULL(last_month.total, 0))/IFNULL(last_month.total, 0) * 100, 2), 0.00) END AS percentage FROM months LEFT JOIN (SELECT MONTH(Cotizaciones.fecha) AS month, COUNT(Cotizaciones.cotId) AS total FROM Cotizaciones WHERE MONTH(Cotizaciones.fecha) = MONTH(NOW()) AND YEAR(Cotizaciones.fecha) = YEAR(NOW()) GROUP BY MONTH(Cotizaciones.fecha)) AS actual_month ON months.num_month = actual_month.month LEFT JOIN (SELECT MONTH(Cotizaciones.fecha) AS month, COUNT(Cotizaciones.cotId) AS total FROM Cotizaciones WHERE MONTH(Cotizaciones.fecha) = MONTH(NOW() - INTERVAL 1 MONTH) AND CASE WHEN MONTH(NOW()) = "1" THEN YEAR(Cotizaciones.fecha) = YEAR(NOW() - INTERVAL 1 YEAR) ELSE YEAR(Cotizaciones.fecha) = YEAR(NOW()) END GROUP BY MONTH(Cotizaciones.fecha)) AS last_month ON months.num_month = CASE WHEN last_month.month = "12" THEN last_month.month - 11 ELSE last_month.month + 1 END WHERE months.num_month = MONTH(NOW());');
    const cambioOrdenes = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.*, CASE WHEN last_month.total IS NULL OR 0 THEN IFNULL(actual_month.total * 100, 0.00) ELSE IFNULL(ROUND((IFNULL(actual_month.total, 0) - IFNULL(last_month.total, 0))/IFNULL(last_month.total, 0) * 100, 2), 0.00) END AS percentage FROM months LEFT JOIN (SELECT MONTH(Ordenes.fechaGen) AS month, COUNT(Ordenes.ordenId) AS total FROM Ordenes WHERE MONTH(Ordenes.fechaGen) = MONTH(NOW()) AND YEAR(Ordenes.fechaGen) = YEAR(NOW()) GROUP BY MONTH(Ordenes.fechaGen)) AS actual_month ON months.num_month = actual_month.month LEFT JOIN (SELECT MONTH(Ordenes.fechaGen) AS month, COUNT(Ordenes.ordenId) AS total FROM Ordenes WHERE MONTH(Ordenes.fechaGen) = MONTH(NOW() - INTERVAL 1 MONTH) AND CASE WHEN MONTH(NOW()) = "1" THEN YEAR(Ordenes.fechaGen) = YEAR(NOW() - INTERVAL 1 YEAR) ELSE YEAR(Ordenes.fechaGen) = YEAR(NOW()) END GROUP BY MONTH(Ordenes.fechaGen)) AS last_month ON months.num_month = CASE WHEN last_month.month = "12" THEN last_month.month - 11 ELSE last_month.month + 1 END WHERE months.num_month = MONTH(NOW());');
    const cambioVentas = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.*, CASE WHEN last_month.total IS NULL OR 0 THEN IFNULL(actual_month.total * 100, 0.00) ELSE IFNULL(ROUND((IFNULL(actual_month.total, 0) - IFNULL(last_month.total, 0))/IFNULL(last_month.total, 0) * 100, 2), 0.00) END AS percentage FROM months LEFT JOIN (SELECT MONTH(Ordenes.fechaEnt) AS month, SUM(Cotizaciones.total) AS total FROM Ordenes INNER JOIN Cotizaciones ON Ordenes.cot_id = Cotizaciones.cotId WHERE Ordenes.terminada = 0 AND MONTH(Ordenes.fechaEnt) = MONTH(NOW()) AND YEAR(Ordenes.fechaEnt) = YEAR(NOW()) GROUP BY MONTH(Ordenes.fechaEnt)) AS actual_month ON months.num_month = actual_month.month LEFT JOIN (SELECT MONTH(Ordenes.fechaEnt) AS month, SUM(Cotizaciones.total) AS total FROM Ordenes INNER JOIN Cotizaciones ON Ordenes.cot_id = Cotizaciones.cotId WHERE MONTH(Ordenes.fechaEnt) = MONTH(NOW() - INTERVAL 1 MONTH) AND CASE WHEN MONTH(NOW()) = "1" THEN YEAR(Ordenes.fechaEnt) = YEAR(NOW() - INTERVAL 1 YEAR) ELSE YEAR(Ordenes.fechaEnt) = YEAR(NOW()) END GROUP BY MONTH(Ordenes.fechaEnt)) AS last_month ON months.num_month = CASE WHEN last_month.month = "12" THEN last_month.month - 11 ELSE last_month.month + 1 END WHERE months.num_month = MONTH(NOW());');

    // informacion para los filtros de las graficas
    const filtroProductos = await pool.query('WITH months AS (SELECT "1" AS num_month, "Ene" AS name_month UNION ALL SELECT "2" AS num_month, "Feb" AS name_month UNION ALL SELECT "3" AS num_month, "Mar" AS name_month UNION ALL SELECT "4" AS num_month, "Abr" AS name_month UNION ALL SELECT "5" AS num_month, "May" AS name_month UNION ALL SELECT "6" AS num_month, "Jun" AS name_month UNION ALL SELECT "7" AS num_month, "Jul" AS name_month UNION ALL SELECT "8" AS num_month, "Ago" AS name_month UNION ALL SELECT "9" AS num_month, "Sep" AS name_month UNION ALL SELECT "10" AS num_month, "Oct" AS name_month UNION ALL SELECT "11" AS num_month, "Nov" AS name_month UNION ALL SELECT "12" AS num_month, "Dic" AS name_month) SELECT res.year, months.* FROM months LEFT JOIN (SELECT YEAR(Ordenes.fechaEnt) AS year, MONTH(Ordenes.fechaEnt) AS month FROM (((ProductosCotizados INNER JOIN Productos ON ProductosCotizados.producto_id = Productos.productoId) INNER JOIN Cotizaciones ON ProductosCotizados.cot_id = Cotizaciones.cotId) INNER JOIN Ordenes ON Ordenes.cot_id = Cotizaciones.cotId) WHERE Ordenes.terminada = 0 GROUP BY YEAR(Ordenes.fechaEnt), MONTH(Ordenes.fechaEnt)) AS res ON months.num_month = res.month WHERE res.year IS NOT NULL ORDER BY res.year DESC, res.month DESC;');
    const filtroClientes = await pool.query('WITH months AS (SELECT "1" AS num_month, "Ene" AS name_month UNION ALL SELECT "2" AS num_month, "Feb" AS name_month UNION ALL SELECT "3" AS num_month, "Mar" AS name_month UNION ALL SELECT "4" AS num_month, "Abr" AS name_month UNION ALL SELECT "5" AS num_month, "May" AS name_month UNION ALL SELECT "6" AS num_month, "Jun" AS name_month UNION ALL SELECT "7" AS num_month, "Jul" AS name_month UNION ALL SELECT "8" AS num_month, "Ago" AS name_month UNION ALL SELECT "9" AS num_month, "Sep" AS name_month UNION ALL SELECT "10" AS num_month, "Oct" AS name_month UNION ALL SELECT "11" AS num_month, "Nov" AS name_month UNION ALL SELECT "12" AS num_month, "Dic" AS name_month) SELECT res.year, months.* FROM months LEFT JOIN (SELECT YEAR(Ordenes.fechaEnt) AS year, MONTH(Ordenes.fechaEnt) AS month FROM ((Cotizaciones INNER JOIN Clientes ON Cotizaciones.cliente_id = Clientes.clienteId) INNER JOIN Ordenes ON Cotizaciones.cotId = Ordenes.cot_id) WHERE Ordenes.terminada = 0 GROUP BY YEAR(Ordenes.fechaEnt), MONTH(Ordenes.fechaEnt)) AS res ON months.num_month = res.month WHERE res.year IS NOT NULL ORDER BY res.year DESC, res.month DESC;');

    // agrupar informacion de las tarjetas
    const tarjetas = {
        tarjEmpleados: tarjEmpleados[0],
        cambioEmpleados: cambioEmpleados[0],
        tarjCotizaciones: tarjCotizaciones[0],
        cambioCotizaciones: cambioCotizaciones[0],
        tarjOrdenes: tarjOrdenes[0],
        cambioOrdenes: cambioOrdenes[0],
        tarjVentas: tarjVentas[0],
        cambioVentas: cambioVentas[0]
    }

    res.render('dashboard/dashboard', {cotizaciones: cotizaciones, ordenes: ordenes, tarjetas: tarjetas, filtroProductos: filtroProductos, filtroClientes: filtroClientes});
})

router.get('/graphs', isLoggedIn, async (req, res) =>{
    // informacion para las gráficas
    //const infoG1 = await pool.query('SELECT solicitante, count(cotId) AS compras FROM Cotizaciones WHERE estatus = "Ordenada" GROUP BY solicitante;');
    const infoG1 = await pool.query('SELECT areas.nombre AS nombre, COUNT(Empleados.empleadoId) AS total FROM ((Empleados INNER JOIN Areas ON Empleados.area_id = Areas.areaId) INNER JOIN Usuarios ON Empleados.empleadoId = Usuarios.empleado_id) WHERE Areas.activo = 1 AND usuarios.activo = 1 GROUP BY areas.nombre HAVING total > 0;');
    const infoG2 = await pool.query('SELECT estatus, COUNT(cotId) AS total FROM Cotizaciones WHERE MONTH(fecha) = MONTH(NOW()) AND YEAR(fecha) = YEAR(NOW()) GROUP BY MONTH(fecha), estatus;');
    const infoG3 = await pool.query('SELECT IF(terminada = 0, "Trabajando", "Completada") AS estatus, COUNT(ordenId) AS total FROM Ordenes WHERE MONTH(fechaGen) = MONTH(NOW()) AND YEAR(fechaGen) = YEAR(NOW()) GROUP BY MONTH(fechaGen), terminada;');
    const infoG4 = await pool.query('WITH months AS (SELECT "1" AS num_month, "Enero" AS name_month UNION ALL SELECT "2" AS num_month, "Febrero" AS name_month UNION ALL SELECT "3" AS num_month, "Marzo" AS name_month UNION ALL SELECT "4" AS num_month, "Abril" AS name_month UNION ALL SELECT "5" AS num_month, "Mayo" AS name_month UNION ALL SELECT "6" AS num_month, "Junio" AS name_month UNION ALL SELECT "7" AS num_month, "Julio" AS name_month UNION ALL SELECT "8" AS num_month, "Agosto" AS name_month UNION ALL SELECT "9" AS num_month, "Septiembre" AS name_month UNION ALL SELECT "10" AS num_month, "Octubre" AS name_month UNION ALL SELECT "11" AS num_month, "Noviembre" AS name_month UNION ALL SELECT "12" AS num_month, "Diciembre" AS name_month) SELECT months.name_month, IF(res.total IS NULL, 0.00, res.total) AS total FROM months LEFT JOIN (SELECT MONTH(Ordenes.fechaEnt) AS month, SUM(Cotizaciones.total) AS total FROM Ordenes INNER JOIN Cotizaciones ON Ordenes.cot_id = Cotizaciones.cotId WHERE Ordenes.terminada = 0 AND YEAR(Ordenes.fechaEnt) = YEAR(NOW()) GROUP BY MONTH(Ordenes.fechaEnt)) AS res ON months.num_month = res.month WHERE months.num_month BETWEEN 1 AND MONTH(NOW());');
    const infoG5 = await pool.query('SELECT Productos.productoId AS id, Productos.nombre AS categoria, SUM(ProductosCotizados.monto) AS compras FROM (((ProductosCotizados INNER JOIN Productos ON ProductosCotizados.producto_id = Productos.productoId) INNER JOIN Cotizaciones ON ProductosCotizados.cot_id = Cotizaciones.cotId) INNER JOIN Ordenes ON Ordenes.cot_id = Cotizaciones.cotId) WHERE Ordenes.terminada = 0 GROUP BY Productos.productoId ORDER BY Productos.nombre;');
    const infoG6 = await pool.query('SELECT Clientes.clienteId AS id, Clientes.nombre AS categoria, SUM(Cotizaciones.total) AS compras FROM ((Cotizaciones INNER JOIN Clientes ON Cotizaciones.cliente_id = Clientes.clienteId) INNER JOIN Ordenes ON Cotizaciones.cotId = Ordenes.cot_id) WHERE Ordenes.terminada = 0 GROUP BY Clientes.clienteId;');

    // agrupar en categoria "otros" a todos los clientes que hayan hecho compras totales menores a 1000
    infoG5Filtrada = infoG5.reduce(filterOthers, []);
    infoG6Filtrada = infoG6.reduce(filterOthers, []);

    // eliminar el último salto de linea
    infoG5Filtrada.forEach(arreglo => {
        if(arreglo.categoria == 'Otros'){
            arreglo.nombres = arreglo.nombres.replace(/\n$/, '');
        }
    });

    infoG6Filtrada.forEach(arreglo => {
        if(arreglo.categoria == 'Otros'){
            arreglo.nombres = arreglo.nombres.replace(/\n$/, '');
        }
    });

    // agrupar la información de todas las gráficas
    const infoGraphs = {
        infoG1,
        infoG2,
        infoG3,
        infoG4,
        infoG5Filtrada,
        infoG6Filtrada
    }
    res.send({infoGraphs: infoGraphs});
})

router.post('/graphsFilter', isLoggedIn, async (req, res) => {
    const { typeChart, dateFilter } = req.body;
    let infoFiltrada = {};
    if(typeChart === 'bar'){
        if(dateFilter === 'global'){
            infoFiltrada = await pool.query('SELECT Productos.productoId AS id, Productos.nombre AS categoria, SUM(ProductosCotizados.monto) AS compras FROM (((ProductosCotizados INNER JOIN Productos ON ProductosCotizados.producto_id = Productos.productoId) INNER JOIN Cotizaciones ON ProductosCotizados.cot_id = Cotizaciones.cotId) INNER JOIN Ordenes ON Ordenes.cot_id = Cotizaciones.cotId) WHERE Ordenes.terminada = 0 GROUP BY Productos.productoId ORDER BY Productos.nombre;');
        }else{
            const date = dateFilter.split('-');
            infoFiltrada = await pool.query('WITH months AS (SELECT "1" AS num_month, "Ene" AS name_month UNION ALL SELECT "2" AS num_month, "Feb" AS name_month UNION ALL SELECT "3" AS num_month, "Mar" AS name_month UNION ALL SELECT "4" AS num_month, "Abr" AS name_month UNION ALL SELECT "5" AS num_month, "May" AS name_month UNION ALL SELECT "6" AS num_month, "Jun" AS name_month UNION ALL SELECT "7" AS num_month, "Jul" AS name_month UNION ALL SELECT "8" AS num_month, "Ago" AS name_month UNION ALL SELECT "9" AS num_month, "Sep" AS name_month UNION ALL SELECT "10" AS num_month, "Oct" AS name_month UNION ALL SELECT "11" AS num_month, "Nov" AS name_month UNION ALL SELECT "12" AS num_month, "Dic" AS name_month) SELECT res.categoria AS categoria, res.compras AS compras FROM months LEFT JOIN (SELECT YEAR(Ordenes.fechaEnt) AS year, MONTH(Ordenes.fechaEnt) AS month, Productos.productoId AS id, Productos.nombre AS categoria, SUM(ProductosCotizados.monto) AS compras FROM (((ProductosCotizados INNER JOIN Productos ON ProductosCotizados.producto_id = Productos.productoId) INNER JOIN Cotizaciones ON ProductosCotizados.cot_id = Cotizaciones.cotId) INNER JOIN Ordenes ON Ordenes.cot_id = Cotizaciones.cotId) WHERE Ordenes.terminada = 0 GROUP BY YEAR(Ordenes.fechaEnt), MONTH(Ordenes.fechaEnt), Productos.productoId) AS res ON months.num_month = res.month WHERE res.month = ? AND res.year = ? ORDER BY res.year, res.month, res.categoria;', [date[1], date[0]]);
        }
    }else{
        if(dateFilter === 'global'){
            infoFiltrada = await pool.query('SELECT Clientes.clienteId AS id, Clientes.nombre AS categoria, SUM(Cotizaciones.total) AS compras FROM ((Cotizaciones INNER JOIN Clientes ON Cotizaciones.cliente_id = Clientes.clienteId) INNER JOIN Ordenes ON Cotizaciones.cotId = Ordenes.cot_id) WHERE Ordenes.terminada = 0 GROUP BY Clientes.clienteId;');
        }else{
            const date = dateFilter.split('-');
            infoFiltrada = await pool.query('WITH months AS (SELECT "1" AS num_month, "Ene" AS name_month UNION ALL SELECT "2" AS num_month, "Feb" AS name_month UNION ALL SELECT "3" AS num_month, "Mar" AS name_month UNION ALL SELECT "4" AS num_month, "Abr" AS name_month UNION ALL SELECT "5" AS num_month, "May" AS name_month UNION ALL SELECT "6" AS num_month, "Jun" AS name_month UNION ALL SELECT "7" AS num_month, "Jul" AS name_month UNION ALL SELECT "8" AS num_month, "Ago" AS name_month UNION ALL SELECT "9" AS num_month, "Sep" AS name_month UNION ALL SELECT "10" AS num_month, "Oct" AS name_month UNION ALL SELECT "11" AS num_month, "Nov" AS name_month UNION ALL SELECT "12" AS num_month, "Dic" AS name_month) SELECT months.*, res.* FROM months LEFT JOIN (SELECT YEAR(Ordenes.fechaEnt) AS year, MONTH(Ordenes.fechaEnt) AS month, Clientes.clienteId AS id, Clientes.nombre AS categoria, SUM(Cotizaciones.total) AS compras FROM ((Cotizaciones INNER JOIN Clientes ON Cotizaciones.cliente_id = Clientes.clienteId) INNER JOIN Ordenes ON Cotizaciones.cotId = Ordenes.cot_id) WHERE Ordenes.terminada = 0 GROUP BY YEAR(Ordenes.fechaEnt), MONTH(Ordenes.fechaEnt), Clientes.clienteId) AS res ON months.num_month = res.month WHERE res.month = ? AND res.year = ? ORDER BY res.year, res.month, res.categoria;', [date[1], date[0]]);
        }
    }
    res.send({infoFiltrada: infoFiltrada});
});

module.exports = router;